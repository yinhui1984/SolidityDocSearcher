#example
#enums
#variable-declarations
#control-structures
#imports
#yul-optimizer
#function-calls
#syntax
#how-to-update-your-code
#interface-changes
#silent-changes-of-the-semantics
#inline-assembly
#semantic-and-syntactic-changes
#explicitness-requirements
#functions
#constructors
#semantic-only-changes
#errors
#events
#types
#cleanup
#order-of-precedence-of-operators
#function-modifiers
#solidity
#getting-started
#translations
#contents
#introduction-to-smart-contracts
#a-simple-smart-contract
#storage-example
#subcurrency-example
#blockchain-basics
#transactions
#blocks
#index-6
#overview
#accounts
#index-8
#gas
#storage-memory-and-the-stack
#instruction-set
#message-calls
#delegatecall-and-libraries
#logs
#create
#deactivate-and-self-destruct
#precompiled-contracts
#installing-the-solidity-compiler
#versioning
#remix
#npm-node-js
#docker
#linux-packages
#macos-packages
#static-binaries
#building-from-source
#prerequisites-all-operating-systems
#minimum-compiler-versions
#prerequisites-macos
#prerequisites-windows
#clone-the-repository
#command-line-build
#cmake-options
#smt-solvers
#the-version-string-in-detail
#important-information-about-versioning
#solidity-by-example
#voting
#possible-improvements
#blind-auction
#simple-open-auction
#id2
#safe-remote-purchase
#micropayment-channel
#creating-and-verifying-signatures
#creating-the-signature
#what-to-sign
#packing-arguments
#recovering-the-message-signer-in-solidity
#extracting-the-signature-parameters
#computing-the-message-hash
#the-full-contract
#writing-a-simple-payment-channel
#what-is-a-payment-channel
#opening-the-payment-channel
#making-payments
#closing-the-payment-channel
#channel-expiration
#id3
#verifying-payments
#modular-contracts
#layout-of-a-solidity-source-file
#spdx-license-identifier
#pragmas
#version-pragma
#abi-coder-pragma
#experimental-pragma
#abiencoderv2
#smtchecker
#importing-other-source-files
#syntax-and-semantics
#import-paths
#comments
#structure-of-a-contract
#state-variables
#struct-types
#enum-types
#value-types
#booleans
#integers
#comparisons
#bit-operations
#shifts
#addition-subtraction-and-multiplication
#division
#modulo
#exponentiation
#fixed-point-numbers
#address
#members-of-addresses
#contract-types
#fixed-size-byte-arrays
#dynamically-sized-byte-array
#address-literals
#rational-and-integer-literals
#string-literals-and-types
#unicode-literals
#hexadecimal-literals
#user-defined-value-types
#function-types
#reference-types
#data-location
#data-location-and-assignment-behaviour
#arrays
#bytes-and-string-as-arrays
#the-functions-bytes-concat-and-string-concat
#allocating-memory-arrays
#array-literals
#array-members
#dangling-references-to-storage-array-elements
#array-slices
#structs
#mapping-types
#iterable-mappings
#operators
#ternary-operator
#compound-and-increment-decrement-operators
#delete
#conversions-between-elementary-types
#implicit-conversions
#explicit-conversions
#conversions-between-literals-and-elementary-types
#integer-types
#id21
#addresses
#units-and-globally-available-variables
#ether-units
#time-units
#special-variables-and-functions
#block-and-transaction-properties
#abi-encoding-and-decoding-functions
#members-of-bytes
#members-of-string
#error-handling
#mathematical-and-cryptographic-functions
#members-of-address-types
#contract-related
#type-information
#reserved-keywords
#expressions-and-control-structures
#internal-function-calls
#external-function-calls
#function-calls-with-named-parameters
#omitted-names-in-function-definitions
#creating-contracts-via-new
#salted-contract-creations-create2
#order-of-evaluation-of-expressions
#assignment
#destructuring-assignments-and-returning-multiple-values
#complications-for-arrays-and-structs
#scoping-and-declarations
#checked-or-unchecked-arithmetic
#error-handling-assert-require-revert-and-exceptions
#panic-via-assert-and-error-via-require
#revert
#try-catch
#contracts
#creating-contracts
#visibility-and-getters
#state-variable-visibility
#function-visibility
#getter-functions
#constant-and-immutable-state-variables
#constant
#immutable
#function-parameters-and-return-variables
#function-parameters
#return-variables
#returning-multiple-values
#state-mutability
#view-functions
#pure-functions
#special-functions
#receive-ether-function
#fallback-function
#function-overloading
#overload-resolution-and-argument-matching
#members-of-events
#additional-resources-for-understanding-events
#errors-and-the-revert-statement
#members-of-errors
#inheritance
#function-overriding
#modifier-overriding
#arguments-for-base-constructors
#multiple-inheritance-and-linearization
#inheriting-different-kinds-of-members-of-the-same-name
#abstract-contracts
#interfaces
#libraries
#function-signatures-and-selectors-in-libraries
#call-protection-for-libraries
#using-for
#access-to-external-variables-functions-and-libraries
#things-to-avoid
#conventions-in-solidity
#values-of-typed-variables
#memory-management
#memory-safety
#cheatsheet
#global-variables
#function-visibility-specifiers
#modifiers
#language-grammar
#a4.SolidityParser
#a4.SolidityParser.sourceUnit
#a4.SolidityParser.importDirective
#a4.SolidityParser.path
#a4.SolidityParser.symbolAliases
#a4.SolidityParser.contractDefinition
#a4.SolidityParser.interfaceDefinition
#a4.SolidityParser.libraryDefinition
#a4.SolidityParser.inheritanceSpecifier
#a4.SolidityParser.contractBodyElement
#a4.SolidityParser.callArgumentList
#a4.SolidityParser.identifierPath
#a4.SolidityParser.modifierInvocation
#a4.SolidityParser.visibility
#a4.SolidityParser.parameterList
#a4.SolidityParser.constructorDefinition
#a4.SolidityParser.stateMutability
#a4.SolidityParser.overrideSpecifier
#a4.SolidityParser.functionDefinition
#a4.SolidityParser.modifierDefinition
#a4.SolidityParser.fallbackFunctionDefinition
#a4.SolidityParser.receiveFunctionDefinition
#a4.SolidityParser.structDefinition
#a4.SolidityParser.structMember
#a4.SolidityParser.enumDefinition
#a4.SolidityParser.userDefinedValueTypeDefinition
#a4.SolidityParser.stateVariableDeclaration
#a4.SolidityParser.constantVariableDeclaration
#a4.SolidityParser.eventParameter
#a4.SolidityParser.eventDefinition
#a4.SolidityParser.errorParameter
#a4.SolidityParser.errorDefinition
#a4.SolidityParser.usingDirective
#a4.SolidityParser.typeName
#a4.SolidityParser.elementaryTypeName
#a4.SolidityParser.functionTypeName
#a4.SolidityParser.variableDeclaration
#a4.SolidityParser.dataLocation
#a4.SolidityParser.expression
#a4.SolidityParser.tupleExpression
#a4.SolidityParser.inlineArrayExpression
#a4.SolidityParser.identifier
#a4.SolidityParser.literal
#a4.SolidityParser.booleanLiteral
#a4.SolidityParser.stringLiteral
#a4.SolidityParser.hexStringLiteral
#a4.SolidityParser.unicodeStringLiteral
#a4.SolidityParser.numberLiteral
#a4.SolidityParser.block
#a4.SolidityParser.uncheckedBlock
#a4.SolidityParser.statement
#a4.SolidityParser.ifStatement
#a4.SolidityParser.forStatement
#a4.SolidityParser.whileStatement
#a4.SolidityParser.doWhileStatement
#a4.SolidityParser.continueStatement
#a4.SolidityParser.breakStatement
#a4.SolidityParser.tryStatement
#a4.SolidityParser.catchClause
#a4.SolidityParser.returnStatement
#a4.SolidityParser.emitStatement
#a4.SolidityParser.revertStatement
#a4.SolidityParser.assemblyStatement
#a4.SolidityParser.assemblyFlags
#a4.SolidityParser.variableDeclarationTuple
#a4.SolidityParser.variableDeclarationStatement
#a4.SolidityParser.expressionStatement
#a4.SolidityParser.mappingType
#a4.SolidityParser.mappingKeyType
#a4.SolidityParser.yulStatement
#a4.SolidityParser.yulBlock
#a4.SolidityParser.yulVariableDeclaration
#a4.SolidityParser.yulAssignment
#a4.SolidityParser.yulIfStatement
#a4.SolidityParser.yulForStatement
#a4.SolidityParser.yulSwitchStatement
#a4.SolidityParser.yulFunctionDefinition
#a4.SolidityParser.yulPath
#a4.SolidityParser.yulFunctionCall
#a4.SolidityParser.yulBoolean
#a4.SolidityParser.yulLiteral
#a4.SolidityParser.yulExpression
#a4.SolidityLexer
#a4.SolidityLexer.FixedBytes
#a4.SolidityLexer.NumberUnit
#a4.SolidityLexer.SignedIntegerType
#a4.SolidityLexer.UnsignedIntegerType
#a4.SolidityLexer.NonEmptyStringLiteral
#a4.SolidityLexer.EmptyStringLiteral
#a4.SolidityLexer.SingleQuotedPrintable
#a4.SolidityLexer.DoubleQuotedPrintable
#a4.SolidityLexer.EscapeSequence
#a4.SolidityLexer.UnicodeStringLiteral
#a4.SolidityLexer.HexString
#a4.SolidityLexer.HexNumber
#a4.SolidityLexer.DecimalNumber
#a4.SolidityLexer.Identifier
#a4.SolidityLexer.YulEVMBuiltin
#a4.SolidityLexer.YulIdentifier
#a4.SolidityLexer.YulHexNumber
#a4.SolidityLexer.YulDecimalNumber
#a4.SolidityLexer.YulStringLiteral
#a4.SolidityLexer.PragmaToken
#using-the-compiler
#using-the-commandline-compiler
#basic-usage
#optimizer-options
#base-path-and-import-remapping
#library-linking
#setting-the-evm-version-to-target
#target-options
#compiler-input-and-output-json-description
#input-description
#output-description
#error-types
#analysing-the-compiler-output
#solidity-ir-based-codegen-changes
#internals
#internal-function-pointers
#layout-of-state-variables-in-storage
#mappings-and-dynamic-arrays
#bytes-and-string
#json-output
#layout-in-memory
#differences-to-layout-in-storage
#example-for-difference-in-arrays
#example-for-difference-in-struct-layout
#layout-of-call-data
#cleaning-up-variables
#source-mappings
#the-optimizer
#benefits-of-optimizing-solidity-code
#differences-between-optimized-and-non-optimized-code
#optimizer-parameter-runs
#opcode-based-optimizer-module
#simple-inlining
#yul-based-optimizer-module
#optimizer-steps
#selecting-optimizations
#preprocessing
#disambiguator
#functionhoister
#functiongrouper
#forloopconditionintobody
#forloopinitrewriter
#vardeclinitializer
#pseudo-ssa-transformation
#expressionsplitter
#ssatransform
#redundantassigneliminator
#tools
#movability
#dataflowanalyzer
#expression-scale-simplifications
#commonsubexpressioneliminator
#expression-simplifier
#literalrematerialiser
#loadresolver
#reasoningbasedsimplifier
#statement-scale-simplifications
#circularreferencespruner
#conditionalsimplifier
#conditionalunsimplifier
#controlflowsimplifier
#deadcodeeliminator
#equalstoreeliminator
#unusedpruner
#structuralsimplifier
#blockflattener
#loopinvariantcodemotion
#function-level-optimizations
#functionspecializer
#unusedfunctionparameterpruner
#unusedstoreeliminator
#equivalentfunctioncombiner
#function-inlining
#expressioninliner
#fullinliner
#expressionjoiner
#ssareverser
#stackcompressor
#rematerialiser
#forloopconditionoutofbody
#webassembly-specific
#mainfunction
#contract-metadata
#encoding-of-the-metadata-hash-in-the-bytecode
#usage-for-automatic-interface-generation-and-natspec
#usage-for-source-code-verification
#contract-abi-specification
#basic-design
#function-selector
#argument-encoding
#mapping-solidity-to-abi-types
#design-criteria-for-the-encoding
#formal-specification-of-the-encoding
#function-selector-and-argument-encoding
#examples
#use-of-dynamic-types
#json
#handling-tuple-types
#strict-encoding-mode
#non-standard-packed-mode
#encoding-of-indexed-event-parameters
#solidity-v0-5-0-breaking-changes
#deprecated-elements
#command-line-and-json-interfaces
#conversions
#literals-and-suffixes
#variables
#interoperability-with-older-contracts
#solidity-v0-6-0-breaking-changes
#changes-the-compiler-might-not-warn-about
#new-features
#new-error-reporter
#metadata-hash-options
#c-api-changes
#solidity-v0-7-0-breaking-changes
#changes-to-the-syntax
#removal-of-unused-or-unsafe-features
#mappings-outside-storage
#functions-and-events
#expressions
#declarations
#solidity-v0-8-0-breaking-changes
#new-restrictions
#natspec-format
#documentation-example
#tags
#dynamic-expressions
#inheritance-notes
#documentation-output
#user-documentation
#developer-documentation
#security-considerations
#pitfalls
#private-information-and-randomness
#re-entrancy
#gas-limit-and-loops
#sending-and-receiving-ether
#call-stack-depth
#authorized-proxies
#tx-origin
#two-s-complement-underflows-overflows
#clearing-mappings
#minor-details
#recommendations
#take-warnings-seriously
#restrict-the-amount-of-ether
#keep-it-small-and-modular
#use-the-checks-effects-interactions-pattern
#include-a-fail-safe-mode
#ask-for-peer-review
#smtchecker-and-formal-verification
#tutorial
#overflow
#assert
#state-properties
#external-calls-and-reentrancy
#smtchecker-options-and-tuning
#timeout
#verification-targets
#unproved-targets
#verified-contracts
#trusted-external-calls
#reported-inferred-inductive-invariants
#division-and-modulo-with-slack-variables
#natspec-function-abstraction
#model-checking-engines
#bounded-model-checker-bmc
#constrained-horn-clauses-chc
#smt-and-horn-solvers
#abstraction-and-false-positives
#smt-encoding-and-types
#reference-types-and-aliasing
#contract-balance
#real-world-assumptions
#resources
#general-resources
#integrated-ethereum-development-environments
#editor-integrations
#solidity-tools
#third-party-solidity-parsers-and-grammars
#import-path-resolution
#virtual-filesystem
#import-callback
#initial-content-of-the-virtual-filesystem
#id9
#direct-imports
#relative-imports
#id10
#id11
#id12
#base-path-and-include-paths
#cli-path-normalization-and-stripping
#allowed-paths
#import-remapping
#id13
#id14
#id15
#using-urls-in-imports
#yul
#motivation-and-high-level-description
#simple-example
#stand-alone-usage
#informal-description-of-yul
#literals
#assignments
#if
#switch
#loops
#function-declarations
#specification-of-yul
#restrictions-on-the-grammar
#scoping-rules
#formal-specification
#evm-dialect
#datasize-dataoffset-datacopy
#setimmutable-loadimmutable
#linkersymbol
#memoryguard
#verbatim
#specification-of-yul-object
#optimization-step-sequence
#complete-erc20-example
#style-guide
#introduction
#code-layout
#indentation
#tabs-or-spaces
#blank-lines
#maximum-line-length
#source-file-encoding
#order-of-functions
#whitespace-in-expressions
#function-declaration
#mappings
#other-recommendations
#order-of-layout
#naming-conventions
#naming-styles
#names-to-avoid
#contract-and-library-names
#struct-names
#event-names
#function-names
#function-argument-names
#local-and-state-variable-names
#constants
#modifier-names
#avoiding-naming-collisions
#natspec
#common-patterns
#withdrawal-from-contracts
#restricting-access
#state-machine
#list-of-known-bugs
#contributing
#team-calls
#how-to-report-issues
#workflow-for-pull-requests
#running-the-compiler-tests
#prerequisites
#running-the-tests
#writing-and-running-syntax-tests
#running-the-fuzzer-via-afl
#whiskers
#documentation-style-guide
#english-language
#title-case-for-headings
#expand-contractions
#active-and-passive-voice
#common-terms
#code-examples
#running-documentation-tests
#solidity-language-design
#solidity-brand-guide
#the-solidity-brand
#solidity-brand-name
#solidity-logo-license
#solidity-logo-guidelines
#credits
#language-influences
